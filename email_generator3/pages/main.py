import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import pandas as pd
import plotly.graph_objects as go
import time

if 'logged_in' not in st.session_state or not st.session_state.logged_in:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.stop()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
allowed_roles = {
    "main": ["owner"],
    "sell": ["owner", "staff"],
    "stock": ["owner", "staff"],
}

# ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô "main", "sell", ‡∏´‡∏£‡∏∑‡∏≠ "stock")
current_page = "main"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå

if st.session_state.role not in allowed_roles.get(current_page, []):
    st.error("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
    st.stop()

# ===== Google Sheets Config =====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)

# === URL ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ó ===
sheet_url = "https://docs.google.com/spreadsheets/d/10HLoJriPQZKqPOzXlmeV3l0wYHWz4QTLroZFsq9B9ns/edit?usp=sharing"
sheet = client.open_by_url(sheet_url)
product_ws = sheet.worksheet("products")
sales_ws = sheet.worksheet("sales")

# ===== Functions =====
def load_sales_data():
    data = sales_ws.get_all_records()
    df = pd.DataFrame(data)
    df.columns = df.columns.str.strip().str.lower()
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])
    return df

def load_product_data():
    df = pd.DataFrame(product_ws.get_all_records())
    df.columns = df.columns.str.strip().str.lower()
    return df

def calculate_profit(df_sales, df_products):
    df_sales_cleaned = df_sales.drop(columns=[col for col in ['price', 'cost'] if col in df_sales.columns])

    merged = df_sales_cleaned.merge(
        df_products,
        how='left',
        left_on='product_id',
        right_on='id',
        suffixes=('_sale', '_prod')
    )

    required_cols = ['cost', 'price', 'total']
    missing_cols = [col for col in required_cols if col not in merged.columns]
    if missing_cols:
        raise KeyError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {', '.join(missing_cols)} ‡πÉ‡∏ô DataFrame.\n‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {merged.columns.tolist()}")

    unmatched = merged[merged['id'].isnull()]
    if not unmatched.empty:
        st.warning(f"‚ö†Ô∏è ‡∏û‡∏ö product_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô products: {unmatched['product_id'].unique().tolist()}")

    merged['qty_estimated'] = merged['total'] / merged['price']
    merged['cost_total'] = merged['qty_estimated'] * merged['cost']
    merged['profit'] = merged['total'] - merged['cost_total']
    return merged

# ===== ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ó‡πà‡∏á (Bar Chart) =====
def plot_sales_per_day(sales_df):
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
    sales_daily = sales_df.groupby(sales_df['date'].dt.date)['total'].sum().reset_index()
    sales_daily.columns = ['date', 'total_sales']

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ó‡πà‡∏á
    fig = go.Figure(go.Bar(
        x=sales_daily['date'],  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        y=sales_daily['total_sales'],  # ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        marker=dict(
            color=sales_daily['total_sales'],  # ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
            colorscale='Viridis',  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÅ‡∏ö‡∏ö Viridis
            showscale=True  # ‡πÅ‡∏™‡∏î‡∏á scale ‡∏Ç‡∏≠‡∏á‡∏™‡∏µ
        ),
        text=sales_daily['total_sales'],  # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ö‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á
        hoverinfo='x+text'  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    ))

    fig.update_layout(
        title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô",
        xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        yaxis_title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",
        template="plotly_dark",  # ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏° dark
        barmode='group',
        plot_bgcolor='rgba(0,0,0,0)',  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        xaxis=dict(
            showgrid=True,  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô x
            showline=True,  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô x
            tickangle=-45  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
        ),
        yaxis=dict(
            showgrid=True,  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô y
            showline=True  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô y
        ),
    )

    return fig

# ===== ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° (Pie Chart) ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô =====
def plot_profit_ratio(profit_df):
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
    total_profit = profit_df['profit'].sum()
    total_cost = profit_df['cost_total'].sum()

    profit_ratio = total_profit / total_cost if total_cost != 0 else 0  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 0

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
    fig = go.Figure(go.Pie(
        labels=['‡∏Å‡∏≥‡πÑ‡∏£', '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô'],
        values=[total_profit, total_cost],
        hoverinfo='label+percent',
        textinfo='label+percent',  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        marker=dict(colors=['#FF6666', '#66FF66'])  # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°
    ))

    fig.update_layout(
        title="‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        template="plotly_dark",  # ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏° dark
    )

    return fig

# ===== UI =====
st.set_page_config(page_title="POS Dashboard", layout="wide")
st.title("üìä POS Dashboard")
st.info("‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö POS")

# ===== Load Data =====
sales_df = load_sales_data()
products_df = load_product_data()

if sales_df.empty:
    st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
else:
    today = datetime.now().date()
    this_month = today.strftime("%Y-%m")

    # === ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ===
    sales_today = sales_df[sales_df['date'].dt.date == today]
    total_today = sales_today['total'].sum()

    # === ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ===
    sales_month = sales_df[sales_df['date'].dt.strftime("%Y-%m") == this_month]
    total_month = sales_month['total'].sum()
    total_customers = len(sales_month)

    # === ‡∏Å‡∏≥‡πÑ‡∏£ ===
    try:
        profit_df = calculate_profit(sales_month, products_df)
        total_profit = profit_df['profit'].sum()

        # === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ===
        col1, col2 = st.columns(2)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 1
        with col1:
            st.plotly_chart(plot_sales_per_day(sales_df), use_container_width=True)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2
        with col2:
            st.plotly_chart(plot_profit_ratio(profit_df), use_container_width=True)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üí∏ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{total_today:,.2f} ‡∏ö‡∏≤‡∏ó")
        col2.metric("üìÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", f"{total_month:,.2f} ‡∏ö‡∏≤‡∏ó")
        col3.metric("üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", total_customers)
        col4.metric("üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")

        st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        st.dataframe(sales_month)

    except KeyError as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£:\n\n{e}")

# ===== ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î =====
st.subheader("‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ä‡∏¥‡πâ‡∏ô)")
if 'stock' in products_df.columns:
    low_stock = products_df[products_df['stock'] < 5]
    st.dataframe(low_stock)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'stock' ‡πÉ‡∏ô products")

# ===== ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà =====
st.subheader("üÜï ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)")
if 'date_added' in products_df.columns:
    new_products = products_df[products_df['date_added'] >= pd.to_datetime(today.replace(day=1))]
    st.dataframe(new_products)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'date_added' ‡πÉ‡∏ô products")

# ===== Auto Refresh =====
time.sleep(60)  # ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
st.rerun()
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ time.sleep() ‡πÉ‡∏ô Streamlit ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤